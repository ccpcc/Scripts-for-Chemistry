"""
This script offers an easy way to generate the KPOINTS file for electronic band structure calculation using hybrid functions (such as B3LYP, HSE, PBE0). 
The convenient line mode KPOINTS file only works for LDA or GGA, but not for hybrid functionals. 
To generate KPOINTS file for hybrid functions, you need to put the line mode KPOINTS file (rename as bands_KPOINTS), 
the IBZKPT in scf (rename as scf_IBZKPT) and this script in a same dir, and run this script. 
The generated KPOINTS can be used for hybrid functionals directly.
"""

import numpy as np

def is_number(s):
    # Reference: https://blog.csdn.net/sinat_38682860/article/details/112606441
    if s[0]=="-" or s[0] in "0123456789":
        if s.count(".")<=1 and s.count("-")<=1:
            s=s.replace("-","").replace(".","")
            for i in s:
                if i not in "0123456789":
                    return False
            else:               
                return True
        else:
            return False 
    else:
        return False

def all_num(in_list):
    for s in in_list:
        if not is_number(s):
            return False
    return True

fo=open("./scf_IBZKPT","r")
scf=fo.readlines()
fo.close()
fo=open("./bands_KPOINTS","r")
bands=fo.readlines()
fo.close()

scf_kpt=[]
for l in scf:
    l_list=l.strip().split()
    if all_num(l_list) and len(l_list)>=4:
        for i in range(4):
            l_list[i]=float(l_list[i])
        scf_kpt.append(l_list[:4])
if len(scf_kpt)!=int(scf[1].strip()):
    input("ERROR in reading scf_IBZKPT, press ENTER to exit...")
    raise
scf_kpt=np.array(scf_kpt)
print("%d scf kpoints in total."%scf_kpt.shape[0])

steps=int(bands[1].strip())
bands_kpt=[]
l=0
while l < len(bands):
    l_list=bands[l].strip().split()
    if len(l_list)>=3:
        if all_num(l_list[:3]):
            l_list_next=bands[l+1].strip().split()
            for i in range(3):
                l_list[i]=float(l_list[i])
                l_list_next[i]=float(l_list_next[i])
            add=np.linspace(np.array(l_list[:3]),np.array(l_list_next[:3]),num=steps)
            bands_kpt.append(add)
            l=l+2
            continue
    l=l+1 
bands_kpt=np.concatenate(bands_kpt,axis=0)
add=np.zeros((bands_kpt.shape[0],1,),dtype=np.int_)
bands_kpt=np.concatenate([bands_kpt,add],axis=1)
print("%d scf kpoints in total."%bands_kpt.shape[0])

fo=open("KPOINTS","w")
fo.write("Generated by cccpccc's script in Python\n")
fo.write("    "+str(scf_kpt.shape[0]+bands_kpt.shape[0])+"\n")
fo.write("Reciprocal lattice\n")
for i in range(scf_kpt.shape[0]):
    line="    "
    for j in range(4):
        line=line+"%.14f"%scf_kpt[i,j]+"    "
    fo.write(line+"\n")
for i in range(bands_kpt.shape[0]):
    line="    "
    for j in range(4):
        line=line+"%.14f"%bands_kpt[i,j]+"    "
    fo.write(line+"\n")
fo.close()

input("Finished, press ENTER to exit...")